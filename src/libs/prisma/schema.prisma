generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id      String  @id @default(cuid())
  avatar  String?
  name    String?
  surname String?
  age     Int?
  sex     Gender?

  user User?
}

enum Gender {
  MALE
  FEMALE
}

model Session {
  id            String   @id @default(cuid())
  access_token  String?  @unique @db.Text
  refresh_token String?  @unique @db.Text
  provider      String?
  userId        String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(cuid())

  email         String    @unique
  password      String?
  emailVerified DateTime?
  position      String?
  sessions      Session[]
  chats         Chat[]
  account       Account   @relation(fields: [accountId], references: [id])
  accountId     String    @unique

  applications Application[] @relation("creator")

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?

  roles Role[] @default([user])
}

enum Role {
  user
  admin
}

model Chat {
  id            String    @id @default(cuid())
  participants  User[]
  messages      Message[] @relation("messages")
  messageIds    String[]
  lastMessage   Message?  @relation("lastMessage", fields: [lastMessageId], references: [id])
  lastMessageId String    @unique
}

model Message {
  id          String      @id @default(cuid())
  text        String
  type        MessageType @default(TEXT)
  chat        Chat        @relation("messages", fields: [chatId], references: [id])
  chatId      String
  lastMessage Chat?       @relation("lastMessage")
}

enum MessageType {
  MEDIA
  TEXT
  SYSTEM
}

model Application {
  id String @id @default(cuid())

  title       String
  description String?
  media       LocalMedia[]

  status   KanbanStatuses @relation(fields: [statusId], references: [id])
  statusId String

  creator   User   @relation("creator", fields: [creatorId], references: [id])
  creatorId String

  kanban   Kanban? @relation(fields: [kanbanId], references: [id])
  kanbanId String?
}

model LocalMedia {
  id String @id @default(cuid())

  src  String
  type LocalMediaType
  alt  String

  application   Application? @relation(fields: [applicationId], references: [id])
  applicationId String?
}

enum LocalMediaType {
  PHOTO
  VIDEO
}

model Group {
  id String @id @default(cuid())

  title       String
  description String?

  users User[]

  kanban Kanban?
}

model Kanban {
  id String @id @default(cuid())

  title String

  statuses KanbanStatuses[]

  applications Application[]

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @unique
}

model KanbanStatuses {
  id String @id @default(cuid())

  title String
  color String?
  sort  Int?

  kanban   Kanban @relation(fields: [kanbanId], references: [id])
  kanbanId String

  applications Application[]
}
